#include "defines.h"
#include "TestMaps.h"

#include "OverworldManager.h"
#include "Tile.h"
#include "Character.h"

#include <iostream>
#include <fstream>
#include <string>

#include "Manager.h"
#include "OverworldManager.h"
#include "FileReader.h"
#include "Character.h"

void TestMap0::CreateRooms()
{
	roomCount = 2;

	rooms = std::vector<Room*>();
	rooms.push_back(new TestRoom0());
	rooms.push_back(new TestRoom1());

	currentRoom = rooms[0];
}

Room::RoomData TestRoom0::CreateRoomData()
{

	std::vector<std::vector<std::vector<int>>> layers =
	{
		{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
		},

		{
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1}
		},

		{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
		}
	};

	std::vector<std::vector<int>> doorData = { {1, 240, 33}, {1, 240, 33} };
	std::vector<std::vector<std::string>> textList = 
	{ 
		{"Hello!"}, 
		{"Que es esta? Donde esta el queso de mi padre? Quien sus pantalones? This is a violation of basic human decency. That's super weird, so I wasn't thinking that much about it. Ooh look, a robin! That's really interesting. Robins that fly into windows are less interesting. Hmmmmmmmm? Continuing testing, since the font size has lowered. We're now testing on bigger boxes, trying to see if they can contain even more text. How much text could a text box box if a text box could box text? This sentence should send us over the edge, rolling us into a new box. Hopefully. Just kidding, we need a bit more. Wow, we can hold a lot of text. This seems like a lot of text. Maybe the font size should be bigger. "},
		{"What?", "Who?", "When?", "Why?"}
	};
	dimensions = Point<int>(16, 16);
	int doorCount = 2;
	dialogueCount = 3;
	npcCount = 0;

#pragma region Create NPC Data

	NPCs = std::vector<NonPlayer*>();

#pragma endregion

	return RoomData(layers, doorCount, doorData, textList);
}


Room::RoomData TestRoom1::CreateRoomData()
{
	std::vector<std::vector<std::vector<int>>> layers =
	{
		{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
		},

		{												  
			{1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1			  },
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1 },
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1 },
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1 },
			{1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1 },
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1			  }
		},

		{
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
		}
	};

	std::vector<std::vector<int>> doorData = { {0,240,447}, {0,240,447} };
	std::vector<std::vector<std::string>> textList = {};
	dimensions = Point<int>(16, 16);
	int doorCount = 2;
	dialogueCount = 0;
	npcCount = 1;

#pragma region Create NPC Data

	NPCs.push_back(new TestNPC(200, 200, 32, 32, Manager::GetTexture((int)TEXTURES_TEST::TEX_T_PLAYER), .6f));

#pragma endregion

	return RoomData(layers, doorCount, doorData, textList);
}

void TestNPC::CreateCharacterData()
{
	firstname = "Skyten";
	lastname = "Alwestow";
	ratio = 23;
	startingLevel = 1;
	std::vector<int> stats = { 1,1,1,1,1 };
	attack = stats[0];
	defense = stats[1];
	mind = stats[2];
	spirit = stats[3];
	energy = stats[4];
	magicType[0] = MAGIC_TYPE::WATER;
	magicType[1] = MAGIC_TYPE::LIFE;
	abilities = {};
	movementMode = MOVE_MODE::RANDOM_RADIUS;
	moveRadius = 100;
}
